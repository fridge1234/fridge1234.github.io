(self.webpackChunkouterspace_webpack=self.webpackChunkouterspace_webpack||[]).push([[560],{4679:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o=n(8081),a=n.n(o),r=n(3645),i=n.n(r)()(a());i.push([e.id,"body{background:#040d21;margin:0;color:#627597}article{background:#fff;width:100%;height:100vh;display:flex;flex-direction:column}article h1{padding:0;margin:auto;color:#000;font-size:4rem;font-family:sans-serif}article #scene1,article #scene2,article #scene3,article #scene4{margin:auto;height:80vh;width:100%;background:#fff}article #scene1 canvas,article #scene2 canvas,article #scene3 canvas,article #scene4 canvas{max-width:100%}",""]);const s=i},5812:e=>{e.exports="uniform float time;\nuniform sampler2D tex;\nuniform float lvl;\nvarying vec3 vPos;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvec3 faceNormal(vec3 pos) {\n\tvec3 fdx = dFdx(pos);\n\tvec3 fdy = dFdy(pos);\n\treturn normalize(cross(fdx, fdy));\n}\nbool isBackSide(vec3 pos) {\n\treturn dot(normalize(pos), faceNormal(pos)) < 0.0;\n}\nvec3 col = vec3(0.7333, 0.6863, 1.0);\nvoid main() {\n\tfloat opacity = 1.0;\n\tif (vPos.z < (lvl + ((cos(((time * 1.0) + vPos.x) + (vPos.y * 2.0)) / 15.0) / 4.0))) {\n\t\topacity = 0.0;\n\t}\n\tgl_FragColor.w = opacity - 0.1;\n\tif (isBackSide(vPos)) {\n\t\tgl_FragColor.xyz = col;\n\t}\n\telse {\n\t\tvec4 t = texture2D(tex, (vUv / 1.5) + fract(time / 15.0));\n\t\tgl_FragColor.xyz = mix(col, col * (1.0 - vNormal.z), distance(0.5, vPos.z));\n\t\tgl_FragColor.xyz *= (normalize(t.xyz).y * (col * 2.0));\n\t}\n}\n"},4596:e=>{e.exports="uniform float time;\nvarying vec3 vPos;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvoid main() {\n\tvec3 transformed = position;\n\tvNormal = normal;\n\tvUv = uv;\n\tvPos = transformed;\n\tvec4 mvPosition = modelViewMatrix * vec4(transformed, 1.0);\n\tgl_Position = projectionMatrix * mvPosition;\n}\n"},1515:e=>{e.exports="uniform float time;\nuniform sampler2D tex;\nuniform vec3 col;\nvarying vec3 vPos;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvec3 faceNormal(vec3 pos) {\n\tvec3 fdx = dFdx(pos);\n\tvec3 fdy = dFdy(pos);\n\treturn normalize(cross(fdx, fdy));\n}\nbool isBackSide(vec3 pos) {\n\treturn dot(normalize(pos), faceNormal(pos)) < 0.0;\n}\nvoid main() {\n\tfloat opacity = 1.0;\n\tif (vPos.z < (0.0 + (sin((time + (vUv.x * 5.0)) + (vUv.y * 3.0)) / 10.0))) {\n\t\topacity = 0.0;\n\t}\n\tgl_FragColor.w = opacity;\n\tif (isBackSide(vPos)) {\n\t\tgl_FragColor.xyz = col;\n\t}\n\telse {\n\t\tvec4 t = texture2D(tex, (vUv / 1.5) + fract(time / 15.0));\n\t\tgl_FragColor.xyz = mix(col, col * (1.0 - vNormal.z), distance(0.5, vPos.z));\n\t\tgl_FragColor.xyz *= (normalize(t.xyz).r * (col * 2.0));\n\t}\n}\n"},4740:e=>{e.exports="uniform float time;\nvarying vec3 vPos;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvoid main() {\n\tvec3 transformed = position;\n\tvNormal = normal;\n\tvUv = uv;\n\tvPos = transformed;\n\tvec4 mvPosition = modelViewMatrix * vec4(transformed, 1.0);\n\tgl_Position = projectionMatrix * mvPosition;\n}\n"},3184:e=>{e.exports="uniform float from;\nuniform float len;\nuniform float time;\nuniform sampler2D tex;\nuniform sampler2D tex2;\nvarying float vIndex;\nvarying vec3 vPos;\nvarying vec2 vUv;\nvec3 rgb(int r, int g, int b) {\n\treturn vec3(float(r) / 255.0, float(g) / 255.0, float(b) / 255.0);\n}\nfloat fresnel(float bias, float scale, float power, vec3 I, vec3 N) {\n\treturn bias + (scale * pow(1.0 + dot(I, N), power));\n}\nvec3 faceNormal(vec3 pos) {\n\tvec3 fdx = dFdx(pos);\n\tvec3 fdy = dFdy(pos);\n\treturn normalize(cross(fdx, fdy));\n}\nbool isBackSide(vec3 pos) {\n\treturn dot(normalize(pos), faceNormal(pos)) < 0.0;\n}\nvoid main() {\n\tvec3 normal = normalize(vPos);\n\tvec3 lig = normalize(normal);\n\tfloat diffuse = max(0.0, dot(lig, normal)) / 1.0;\n\tvec3 I = normalize(vPos - cameraPosition);\n\tfloat R = fresnel(0.05, 0.2, 3.0, I, normal);\n\tvec2 uv = vUv;\n\tuv.x *= 5.0;\n\tuv.x -= (time * 0.01);\n\tuv.y += (-time * 0.0025);\n\tvec3 r = texture2D(tex2, uv).xyz;\n\tr += (r + r);\n\tvec3 col = vec3(((diffuse * rgb(84, 118, 145)) * 1.5) + (r * 0.1));\n\tgl_FragColor.xyz = col;\n\tif ((vIndex > from) && (vIndex < (from + len))) {\n\t\tgl_FragColor.w = 0.5;\n\t}\n\telse {\n\t\tdiscard;\n\t\tgl_FragColor.w = 0.0;\n\t}\n}\n"},8615:e=>{e.exports="attribute float indexattr;\nvarying vec3 vPos;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying float vIndex;\nvoid main() {\n\tvec3 transformed = position;\n\tvIndex = indexattr;\n\tvNormal = normal;\n\tvUv = uv;\n\tvPos = transformed;\n\tvec4 mvPosition = modelViewMatrix * vec4(transformed, 1.0);\n\tgl_Position = projectionMatrix * mvPosition;\n}\n"},5384:e=>{e.exports="uniform float time;\nuniform sampler2D tex;\nvarying vec3 vPos;\nvarying vec2 vUv;\nvec3 rgb(int r, int g, int b) {\n\treturn vec3(float(r) / 255.0, float(g) / 255.0, float(b) / 255.0);\n}\nfloat fresnel(float bias, float scale, float power, vec3 I, vec3 N) {\n\treturn bias + (scale * pow(1.0 + dot(I, N), power));\n}\nvoid main() {\n\tvec3 normal = normalize(vPos);\n\tvec3 lig = normalize(normal);\n\tfloat diffuse = max(0.0, dot(lig, normal)) / 1.0;\n\tvec3 I = normalize(vPos - cameraPosition);\n\tfloat R = fresnel(0.05, 0.2, 3.0, I, normal);\n\tvec2 uv = vUv;\n\tuv.x -= (time * 0.01);\n\tuv.y += (-time * 0.0025);\n\tvec3 r = texture2D(tex, uv).xyz;\n\tr += (r + r);\n\tvec3 col = vec3((((diffuse * rgb(84, 118, 145)) * 1.5) + (r * 0.1)) + (R * 0.5));\n\tgl_FragColor.xyz = col;\n\tgl_FragColor.w = 1.0;\n}\n"},7125:e=>{e.exports="uniform float time;\nuniform sampler2D tex;\nvarying vec3 vPos;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvec3 displacement(vec3 p) {\n\tvec2 u = p.xy * 0.1;\n\tvec2 um = u * 0.1;\n\tum.x += (time * 0.01);\n\tum.y += (-time * 0.0025);\n\tum.x += (um.y * 2.0);\n\tvec3 hlg = texture2D(tex, um).xyz;\n\tvec3 hfn = texture2D(tex, u).xyz * 2.0;\n\tvec3 disp = (hlg * 0.5) + ((hfn * 0.1) * (1.0 - hlg));\n\treturn p + (disp / 1.3);\n}\nvoid main() {\n\tvec3 transformed = displacement(position);\n\tvNormal = normal;\n\tvUv = uv;\n\tvPos = transformed;\n\tvec4 mvPosition = modelViewMatrix * vec4(transformed, 1.0);\n\tgl_Position = projectionMatrix * mvPosition;\n}\n"},4781:e=>{e.exports="uniform float time;\nuniform sampler2D tex2;\nvarying vec3 vPos;\nvarying vec2 vUv;\nvec3 rgb(int r, int g, int b) {\n\treturn vec3(float(r) / 255.0, float(g) / 255.0, float(b) / 255.0);\n}\nfloat fresnel(float bias, float scale, float power, vec3 I, vec3 N) {\n\treturn bias + (scale * pow(1.0 + dot(I, N), power));\n}\nvoid main() {\n\tvec3 normal = normalize(vPos);\n\tvec3 lig = normalize(normal);\n\tfloat diffuse = max(0.0, dot(lig, normal)) / 1.0;\n\tvec3 I = normalize(vPos - cameraPosition);\n\tfloat R = fresnel(0.05, 0.2, 3.0, I, normal);\n\tvec2 uv = vUv;\n\tuv.x -= (time * 0.01);\n\tuv.y += (-time * 0.0025);\n\tvec3 r = texture2D(tex2, uv).xyz;\n\tr += (r + r);\n\tvec3 col = vec3((((diffuse * rgb(84, 118 - 10, 145)) * 1.5) + (r * 0.1)) + (R * 0.25));\n\tgl_FragColor.xyz = col;\n\tgl_FragColor.w = 1.0;\n}\n"},5141:e=>{e.exports="uniform float time;\nuniform sampler2D tex;\nvarying vec3 vPos;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec3 vTex;\nmat4 rotation3d(vec3 axis, float angle) {\n\taxis = normalize(axis);\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\tfloat oc = 1.0 - c;\n\treturn mat4(((oc * axis.x) * axis.x) + c, ((oc * axis.x) * axis.y) - (axis.z * s), ((oc * axis.z) * axis.x) + (axis.y * s), 0.0, ((oc * axis.x) * axis.y) + (axis.z * s), ((oc * axis.y) * axis.y) + c, ((oc * axis.y) * axis.z) - (axis.x * s), 0.0, ((oc * axis.z) * axis.x) - (axis.y * s), ((oc * axis.y) * axis.z) + (axis.x * s), ((oc * axis.z) * axis.z) + c, 0.0, 0.0, 0.0, 0.0, 1.0);\n}\nvec3 rotate(vec3 v, vec3 axis, float angle) {\n\treturn (rotation3d(axis, angle) * vec4(v, 1.0)).xyz;\n}\nvoid main() {\n\tvec3 transformed = position;\n\tvNormal = normal;\n\tvUv = uv;\n\tvec4 t = texture2D(tex, uv + (time / 1000.0));\n\tvec4 t2 = texture2D(tex, uv - (time / 1000.0));\n\tvec4 t3 = mix(t, t2 * 1.0, 0.5);\n\ttransformed += t3.xyz;\n\tfloat rot = 3.14 * (((time / 5.0) + transformed.x) + transformed.y);\n\ttransformed = rotate(transformed, vec3(0.0, 1.0, 0.0), rot) / 3.0;\n\tfloat scale = 1.0;\n\ttransformed.x += 0.25;\n\ttransformed.z += 0.35;\n\ttransformed.y -= 0.35;\n\tvPos = transformed;\n\tvec4 mvPosition = modelViewMatrix * vec4(transformed * scale, 1.0);\n\tgl_Position = projectionMatrix * mvPosition;\n}\n"},6530:(e,t,n)=>{"use strict";var o=n(3379),a=n.n(o),r=n(7795),i=n.n(r),s=n(569),l=n.n(s),c=n(3565),v=n.n(c),m=n(9216),d=n.n(m),u=n(4589),f=n.n(u),p=n(4679),x={};x.styleTagTransform=f(),x.setAttributes=v(),x.insert=l().bind(null,"head"),x.domAPI=i(),x.insertStyleElement=d();var g=a()(p.default,x);if(!p.default.locals||e.hot.invalidate){var w=!p.default.locals,h=w?p:p.default.locals;e.hot.accept(4679,(t=>{p=n(4679),function(e,t,n){if(!e&&t||e&&!t)return!1;var o;for(o in e)if((!n||"default"!==o)&&e[o]!==t[o])return!1;for(o in t)if(!(n&&"default"===o||e[o]))return!1;return!0}(h,w?p:p.default.locals,w)?(h=w?p:p.default.locals,g(p.default)):e.hot.invalidate()}))}e.hot.dispose((function(){g()}));p.default&&p.default.locals&&p.default.locals},9606:(e,t,n)=>{"use strict";n(6530);var o=n(9274),a=n(1051),r=n(7365),i=n(3662),s=n(7411),l=n(5696),c=n(1507),v=n(9365),m=n(7054),d=n(7082);m.ZP.registerPlugin(d.i);class u{constructor(e){this.inviewport=!1,this.onUpdate=()=>{},this.setViewportListener=()=>{d.i.create({start:0,end:"max",onUpdate:this.isInViewPort.bind(this)})},this.setEnviroment=()=>{},this.domElem=e,this.renderer=new o.C({antialias:!0}),this.renderer.setSize(this.domElem.clientWidth,this.domElem.clientHeight),this.domElem.appendChild(this.renderer.domElement),this.camera=new a.c(75,1,.1,1e5),this.scene=new r.x,this.scene.background=new i.I("#ffffff"),this.pmremGenerator=new s.a(this.renderer),this.pmremGenerator.compileEquirectangularShader(),this.controls=new v.z(this.camera,this.renderer.domElement),this.isInViewPort(),this.setViewportListener(),this.sceneSetup(),this.onWindowResize(),window.addEventListener("resize",this.onWindowResize.bind(this),!1)}isInViewPort(){const e=d.i.isInViewport(this.domElem);this.inviewport!==e&&(this.inviewport=e,this.inviewport&&this.render())}onWindowResize(){this.camera.aspect=this.domElem.clientWidth/this.domElem.clientHeight,this.camera.updateProjectionMatrix(),this.renderer.setSize(this.domElem.clientWidth,this.domElem.clientHeight)}sceneSetup(){const e=new l.c(new i.I("white"),15,100),t=new c.M("white");e.position.set(50,50,50),this.camera.lookAt(0,0,0),this.scene.add(e,t,this.camera),this.setEnviroment()}render(){this.onUpdate(),this.renderer.render(this.scene,this.camera),this.inviewport&&requestAnimationFrame((()=>this.render()))}animate(e){this.onUpdate=e,this.render()}}var f=n(8221),p=n(1661),x=n(1621),g=n(6454),w=n(2785),h=n(2434),y=n(2010),z=n(4740),P=n.n(z),b=n(1515),S=n.n(b);const I=(new f.d).load("/assets/low_noise.png");I.wrapT=I.wrapS=p.rpg;const U=(new f.d).load("/assets/wat1.jpg");U.wrapT=U.wrapS=p.rpg;const N=new i.I("#fed9c6"),D=new i.I("#cdc0d4"),_=e=>{const t=new x.j({vertexShader:P(),fragmentShader:S(),side:p.ehD,uniforms:{time:{value:0},tex:{value:I},tex2:{value:U},col:{value:e}},transparent:!0}),n=new g.K(new w.x(1,32,32),t);return n.rotation.x=Math.PI/2,n},F=()=>{const e=new g.K(new w.x(1,32,32),new h.E({color:"white",opacity:.1,metalness:.9,roughness:.05,envMapIntensity:.9,reflectivity:.2,refractionRatio:.985,ior:.9,side:p.ehD,transparent:!0}));return e.scale.multiplyScalar(1.01),e},k=_(N),C=F(),E=_(D),j=F();k.position.x+=1.25,C.position.x+=1.25,E.position.x-=1.25,j.position.x-=1.25;const M=new y.Z;M.add(k,C,E,j);const T={group:M,update:()=>{k.material.uniforms.time.value+=.05,E.material.uniforms.time.value+=.05}};var A=n(4596),R=n.n(A),V=n(5812),K=n.n(V);const W=(new f.d).load("/assets/low_noise.png");W.wrapT=W.wrapS=p.rpg;(new f.d).load("/assets/1.png").mapping=p.dSO;const q=e=>{const t=new x.j({vertexShader:R(),fragmentShader:K(),side:p.ehD,uniforms:{time:{value:0},tex:{value:W},lvl:{value:e}},transparent:!0}),n=new g.K(new w.x(1,32,32),t);return n.rotation.x=Math.PI/2,n},Z=()=>{const e=new g.K(new w.x(1,32,32),new h.E({color:"white",emissive:"silver",metalness:1,roughness:.2,opacity:.25,clearcoat:1,clearcoatRoughness:1,side:p.ehD,transparent:!0}));return e.scale.multiplyScalar(1.01),e.material.needsUpdate=!0,e},B=q(.75),$=Z();B.position.x+=3,$.position.x+=3;const H=q(-.5),L=Z();H.position.x-=3,L.position.x-=3;const G=q(0),O=Z(),Y=new y.Z;Y.add(B,$,H,L,G,O);const J={group:Y,update:()=>{B.material.uniforms.time.value+=.05,H.material.uniforms.time.value+=.05,G.material.uniforms.time.value+=.05}};var Q=n(6881),X=n(7546),ee=n(3868),te=n(140),ne=n(8615),oe=n.n(ne),ae=n(3184),re=n.n(ae),ie=n(7125),se=n.n(ie),le=n(5384),ce=n.n(le);const ve=new y.Z,me=(new f.d).load("/assets/wat1.jpg");me.wrapT=me.wrapS=p.rpg;const de=()=>{const e=new x.j({vertexShader:(t=se(),`${t}`.replace(/#include < (.+) >/g,"#include <$1>")),fragmentShader:ce(),side:p.ehD,uniforms:{time:{value:0},tex:{value:me}},transparent:!0});var t;e.needsUpdate=!0;const n=new w.x(1,132,132);return new g.K(n,e)},ue=de();ve.add(ue);const fe={group:ve,update:()=>{ue.material.uniforms.time.value+=.025}},pe=new y.Z,xe=(new f.d).load("/assets/low_noise.png");xe.wrapT=xe.wrapS=p.rpg;const ge=(new f.d).load("/assets/wat1.jpg");ge.wrapT=ge.wrapS=p.rpg;const we=[[0,-1,0],[0,0,0],[0,0,4],[4,0,4],[4,0,-2],[0,0,-2],[0,2,-2],[0,2,4],[4,2,4],[4,2,-2],[2,2,-2],[2,2,1],[2,-2,1],[2,-2,8],[2,4,8],[0,4,8],[0,5,8]].map((e=>new Q.P(...e)));var he=new X.Y(we);const ye=new ee.W(he,220,.5,8),ze=new g.K(ye,new h.E({color:"white",roughness:.5,metalness:1,clearcoat:1,clearcoatRoughness:1,side:p.ehD,transparent:!0,opacity:.15})),Pe=new ee.W(he,220,.5,8),be=Pe.attributes.position.array.length,Se=[...Array(be/3)].map(((e,t)=>t)),Ie=new Float32Array(Se);Pe.setAttribute("indexattr",new te.Tl(Ie,1));const Ue=new g.K(Pe,new x.j({vertexShader:oe(),fragmentShader:re(),side:p.ehD,uniforms:{time:{value:0},tex:{value:xe},tex2:{value:ge},from:{value:0},len:{value:200}}})),Ne=de();Ne.position.set(0,6,7.5);const De=de();De.position.set(0,-3,-.5),pe.add(Ue,ze,Ne,De);const _e={group:pe,update:()=>{Ue.material.uniforms.from.value>be/3+200&&(Ue.material.uniforms.from.value=0),Ue.material.uniforms.from.value+=8,Ue.material.uniforms.time.value+=.05,Ne.material.uniforms.time.value+=.05,De.material.uniforms.time.value+=.05}};var Fe=n(1043),ke=n(5141),Ce=n.n(ke),Ee=n(4781),je=n.n(Ee);const Me=new y.Z,Te=(new f.d).load("/assets/wat1.jpg");Te.wrapT=Te.wrapS=p.rpg;const Ae=(new f.d).load("/assets/wat2.png");Ae.wrapT=Ae.wrapS=p.rpg;const Re=new Fe.F(3,.3,1e3,16,2,2),Ve=(()=>{const e=new x.j({vertexShader:(t=Ce(),`${t}`.replace(/#include < (.+) >/g,"#include <$1>")),fragmentShader:je(),side:p.ehD,uniforms:{time:{value:0},tex:{value:Ae},tex2:{value:Te}},transparent:!0});var t;e.needsUpdate=!0;return new g.K(Re,e)})();Me.add(Ve);const Ke={group:Me,update:()=>{Ve.material.uniforms.time.value+=.05}},We=new u(document.querySelector("#scene1"));We.camera.position.set(0,0,-3),We.camera.lookAt(0,0,0),We.scene.add(fe.group),We.scene.add(Ke.group),We.animate((()=>{Ke.update(),fe.update()}));const qe=new u(document.querySelector("#scene2"));qe.camera.position.set(8,6,-3),qe.camera.lookAt(0,2,0),qe.scene.add(_e.group),qe.animate((()=>{_e.update()}));const Ze=new u(document.querySelector("#scene3"));Ze.camera.position.set(0,1,-4),Ze.camera.lookAt(T.group.position),Ze.scene.add(T.group),Ze.animate((()=>{T.update()}));const Be=new u(document.querySelector("#scene4"));Be.camera.position.set(0,1,-4),Be.camera.lookAt(J.group.position),Be.scene.add(J.group),Be.animate((()=>{J.update()}))}}]);