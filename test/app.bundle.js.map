{"version":3,"file":"app.bundle.js","mappings":"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","sources":["webpack://outerspace-webpack/./src/style.sass","webpack://outerspace-webpack/./src/halfempty2/frag.glsl","webpack://outerspace-webpack/./src/halfempty2/vert.glsl","webpack://outerspace-webpack/./src/halfempty/frag.glsl","webpack://outerspace-webpack/./src/halfempty/vert.glsl","webpack://outerspace-webpack/./src/pipe/frag.glsl","webpack://outerspace-webpack/./src/pipe/vert.glsl","webpack://outerspace-webpack/./src/sphere/frag.glsl","webpack://outerspace-webpack/./src/sphere/vert.glsl","webpack://outerspace-webpack/./src/style.sass?e8f2","webpack://outerspace-webpack/./src/webgl.ts","webpack://outerspace-webpack/./src/halfempty/index.ts","webpack://outerspace-webpack/./src/halfempty2/index.ts","webpack://outerspace-webpack/./src/sphere/index.ts","webpack://outerspace-webpack/./src/pipe/index.ts","webpack://outerspace-webpack/./src/index.ts"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"body{background:#040d21;margin:0;color:#627597}article{background:#fff;width:100vw;height:100vh;display:flex;flex-direction:column}article h1{padding:0;margin:auto;color:#000;font-size:4rem;font-family:sans-serif}article #sphere,article #next,article #half{margin:auto;height:80vh;width:100vw;background:#fff}\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/style.sass\"],\"names\":[],\"mappings\":\"AAKA,KACE,kBAAA,CACA,QAAA,CACA,aANU,CAQZ,QAEE,eAAA,CACA,WAAA,CACA,YAAA,CACA,YAAA,CACA,qBAAA,CAEA,WACE,SAAA,CACA,WAAA,CACA,UAAA,CACA,cAAA,CACA,sBAAA,CACF,4CACE,WAAA,CACA,WAAA,CACA,WAAA,CACA,eAAA\",\"sourcesContent\":[\"$darkblue0: #040d21\\r\\n$darkblue: #030915\\r\\n$lightblue: #627597\\r\\n$lightgreen: #00cfc8\\r\\n\\r\\nbody\\r\\n  background: #040d21\\r\\n  margin: 0\\r\\n  color: $lightblue\\r\\n\\r\\narticle\\r\\n  // background: $lightblue\\r\\n  background: #fff\\r\\n  width: 100vw\\r\\n  height: 100vh\\r\\n  display: flex\\r\\n  flex-direction: column\\r\\n\\r\\n  h1\\r\\n    padding: 0\\r\\n    margin: auto\\r\\n    color: #000\\r\\n    font-size: 4rem\\r\\n    font-family: sans-serif\\r\\n  #sphere, #next, #half\\r\\n    margin: auto\\r\\n    height: 80vh\\r\\n    width: 100vw\\r\\n    background: #fff\\r\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","module.exports = \"uniform float time;\\nuniform sampler2D tex;\\nuniform float lvl;\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\nvec3 faceNormal(vec3 pos) {\\n\\tvec3 fdx = dFdx(pos);\\n\\tvec3 fdy = dFdy(pos);\\n\\treturn normalize(cross(fdx, fdy));\\n}\\nbool isBackSide(vec3 pos) {\\n\\treturn dot(normalize(pos), faceNormal(pos)) < 0.0;\\n}\\nvec3 col = vec3(0.7333, 0.6863, 1.0);\\nvoid main() {\\n\\tfloat opacity = 1.0;\\n\\tif (vPos.z < (lvl + ((cos(((time * 1.0) + vPos.x) + (vPos.y * 2.0)) / 15.0) / 4.0))) {\\n\\t\\topacity = 0.0;\\n\\t}\\n\\tgl_FragColor.w = opacity - 0.1;\\n\\tif (isBackSide(vPos)) {\\n\\t\\tgl_FragColor.xyz = col;\\n\\t}\\n\\telse {\\n\\t\\tvec4 t = texture2D(tex, (vUv / 1.5) + fract(time / 15.0));\\n\\t\\tgl_FragColor.xyz = mix(col, col * (1.0 - vNormal.z), distance(0.5, vPos.z));\\n\\t\\tgl_FragColor.xyz *= (normalize(t.xyz).y * (col * 2.0));\\n\\t}\\n}\\n\"","module.exports = \"uniform float time;\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec3 transformed = position;\\n\\tvNormal = normal;\\n\\tvUv = uv;\\n\\tvPos = transformed;\\n\\tvec4 mvPosition = modelViewMatrix * vec4(transformed, 1.0);\\n\\tgl_Position = projectionMatrix * mvPosition;\\n}\\n\"","module.exports = \"uniform float time;\\nuniform sampler2D tex;\\nuniform vec3 col;\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\nvec3 faceNormal(vec3 pos) {\\n\\tvec3 fdx = dFdx(pos);\\n\\tvec3 fdy = dFdy(pos);\\n\\treturn normalize(cross(fdx, fdy));\\n}\\nbool isBackSide(vec3 pos) {\\n\\treturn dot(normalize(pos), faceNormal(pos)) < 0.0;\\n}\\nvoid main() {\\n\\tfloat opacity = 1.0;\\n\\tif (vPos.z < (0.0 + (sin((time + (vUv.x * 5.0)) + (vUv.y * 3.0)) / 10.0))) {\\n\\t\\topacity = 0.0;\\n\\t}\\n\\tgl_FragColor.w = opacity;\\n\\tif (isBackSide(vPos)) {\\n\\t\\tgl_FragColor.xyz = col;\\n\\t}\\n\\telse {\\n\\t\\tvec4 t = texture2D(tex, (vUv / 1.5) + fract(time / 15.0));\\n\\t\\tgl_FragColor.xyz = mix(col, col * (1.0 - vNormal.z), distance(0.5, vPos.z));\\n\\t\\tgl_FragColor.xyz *= (normalize(t.xyz).r * (col * 2.0));\\n\\t}\\n}\\n\"","module.exports = \"uniform float time;\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec3 transformed = position;\\n\\tvNormal = normal;\\n\\tvUv = uv;\\n\\tvPos = transformed;\\n\\tvec4 mvPosition = modelViewMatrix * vec4(transformed, 1.0);\\n\\tgl_Position = projectionMatrix * mvPosition;\\n}\\n\"","module.exports = \"uniform float from;\\nuniform float len;\\nuniform float time;\\nuniform sampler2D tex;\\nvarying float vIndex;\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\nvarying vec3 vTex;\\nvec3 faceNormal(vec3 pos) {\\n\\tvec3 fdx = dFdx(pos);\\n\\tvec3 fdy = dFdy(pos);\\n\\treturn normalize(cross(fdx, fdy));\\n}\\nbool isBackSide(vec3 pos) {\\n\\treturn dot(normalize(pos), faceNormal(pos)) < 0.0;\\n}\\nvoid main() {\\n\\tvec3 col = vec3(0.0, 0.3294, 0.6392);\\n\\tvec2 uv = vUv;\\n\\tuv.y += uv.x;\\n\\tvec4 t = texture2D(tex, (uv * 2.5) + fract(time / 25.0));\\n\\tvec3 c = vec3(pow(t.r, 3.0));\\n\\tcol *= c;\\n\\tcol *= vec3(10.0);\\n\\tvec3 lightPos = vec3(5.0);\\n\\tvec3 lightColor = vec3(1);\\n\\tvec3 lightDir = normalize(lightPos - vPos);\\n\\tfloat diff = max(dot(vPos, lightDir), 0.0);\\n\\tvec3 diffuse = 0.5 + (diff * lightColor);\\n\\tfloat opacity = 0.5;\\n\\tgl_FragColor.w = opacity;\\n\\tgl_FragColor.xyz = col * diffuse;\\n\\tif ((vIndex > from) && (vIndex < (from + len))) {\\n\\t\\tgl_FragColor.w = opacity;\\n\\t}\\n\\telse {\\n\\t\\tdiscard;\\n\\t\\tgl_FragColor.w = 0.0;\\n\\t}\\n}\\n\"","module.exports = \"attribute float indexattr;\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\nvarying float vIndex;\\nvoid main() {\\n\\tvec3 transformed = position;\\n\\tvIndex = indexattr;\\n\\tvNormal = normal;\\n\\tvUv = uv;\\n\\tvPos = transformed;\\n\\tvec4 mvPosition = modelViewMatrix * vec4(transformed, 1.0);\\n\\tgl_Position = projectionMatrix * mvPosition;\\n}\\n\"","module.exports = \"uniform float time;\\nuniform sampler2D tex;\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\nvarying vec3 vTex;\\nvec3 faceNormal(vec3 pos) {\\n\\tvec3 fdx = dFdx(pos);\\n\\tvec3 fdy = dFdy(pos);\\n\\treturn normalize(cross(fdx, fdy));\\n}\\nbool isBackSide(vec3 pos) {\\n\\treturn dot(normalize(pos), faceNormal(pos)) < 0.0;\\n}\\nvoid main() {\\n\\tvec3 col = vec3(0.0, 0.3294, 0.6392);\\n\\tvec4 t = texture2D(tex, vUv + fract(time / 15.0));\\n\\tvec3 c = vec3(pow(t.r, 3.0));\\n\\tcol *= c;\\n\\tcol *= vec3(10.0);\\n\\tvec3 lightPos = vec3(5.0);\\n\\tvec3 lightColor = vec3(1);\\n\\tvec3 lightDir = normalize(lightPos - vPos);\\n\\tfloat diff = max(dot(normalize(vPos), lightDir), 0.0);\\n\\tvec3 diffuse = 0.5 + (diff * lightColor);\\n\\tfloat opacity = 0.5;\\n\\tgl_FragColor.w = opacity;\\n\\tgl_FragColor.xyz = col * diffuse;\\n}\\n\"","module.exports = \"#include < fog_vertex >\\r\\nuniform float time;\\nuniform sampler2D tex;\\nvarying vec3 vPos;\\nvarying vec3 vNormal;\\nvarying vec2 vUv;\\nvarying vec3 vTex;\\nmat4 rotation3d(vec3 axis, float angle) {\\n\\taxis = normalize(axis);\\n\\tfloat s = sin(angle);\\n\\tfloat c = cos(angle);\\n\\tfloat oc = 1.0 - c;\\n\\treturn mat4(((oc * axis.x) * axis.x) + c, ((oc * axis.x) * axis.y) - (axis.z * s), ((oc * axis.z) * axis.x) + (axis.y * s), 0.0, ((oc * axis.x) * axis.y) + (axis.z * s), ((oc * axis.y) * axis.y) + c, ((oc * axis.y) * axis.z) - (axis.x * s), 0.0, ((oc * axis.z) * axis.x) - (axis.y * s), ((oc * axis.y) * axis.z) + (axis.x * s), ((oc * axis.z) * axis.z) + c, 0.0, 0.0, 0.0, 0.0, 1.0);\\n}\\nvec3 rotate(vec3 v, vec3 axis, float angle) {\\n\\treturn (rotation3d(axis, angle) * vec4(v, 1.0)).xyz;\\n}\\nvoid main() {\\n\\tvec3 transformed = position;\\n\\tvNormal = normal;\\n\\tvUv = uv;\\n\\tvec4 t = texture2D(tex, uv + fract(time / 50.0));\\n\\tvec4 t2 = texture2D(tex, uv - fract(time / 50.0));\\n\\tvec4 t3 = mix(t, t2 * 1.0, 0.5);\\n\\ttransformed += (t3.xyz / 2.0);\\n\\tvTex = t3.xyz;\\n\\tfloat scale = 1.0;\\n\\tvPos = transformed;\\n\\tvec4 mvPosition = modelViewMatrix * vec4(transformed * scale, 1.0);\\n\\tgl_Position = projectionMatrix * mvPosition;\\n}\\n\"","\n      import API from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../node_modules/css-loader/dist/cjs.js!../node_modules/sass-loader/dist/cjs.js!./style.sass\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === \"default\") {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === \"default\") {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var isNamedExport = !content.locals;\n    var oldLocals = isNamedExport ? namedExport : content.locals;\n\n    module.hot.accept(\n      \"!!../node_modules/css-loader/dist/cjs.js!../node_modules/sass-loader/dist/cjs.js!./style.sass\",\n      function () {\n        if (!isEqualLocals(oldLocals, isNamedExport ? namedExport : content.locals, isNamedExport)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = isNamedExport ? namedExport : content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\n\nexport * from \"!!../node_modules/css-loader/dist/cjs.js!../node_modules/sass-loader/dist/cjs.js!./style.sass\";\n       export default content && content.locals ? content.locals : undefined;\n","import * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\r\n\r\nexport class WebglEngine {\r\n  public renderer: THREE.WebGLRenderer;\r\n  public camera: THREE.PerspectiveCamera;\r\n  public scene: THREE.Scene;\r\n  public controls: OrbitControls;\r\n  public pmremGenerator: THREE.PMREMGenerator;\r\n  private cb: Function = () => {};\r\n  private domElem: HTMLElement;\r\n\r\n  constructor(domElem: HTMLElement) {\r\n    this.domElem = domElem;\r\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    this.renderer.setSize(this.domElem.clientWidth, this.domElem.clientHeight);\r\n    // this.renderer.setPixelRatio(2);\r\n    // this.renderer.setClearColor('#fff');\r\n    this.domElem.appendChild(this.renderer.domElement);\r\n    this.camera = new THREE.PerspectiveCamera(75, 1, 0.1, 100000);\r\n    this.scene = new THREE.Scene();\r\n    this.scene.background = new THREE.Color('##f4f4f7');\r\n    this.pmremGenerator = new THREE.PMREMGenerator(this.renderer);\r\n    this.pmremGenerator.compileEquirectangularShader();\r\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\r\n    this.sceneSetup();\r\n    this.onWindowResize();\r\n    window.addEventListener('resize', this.onWindowResize, false);\r\n  }\r\n\r\n  private onWindowResize = () => {\r\n    this.camera.aspect = this.domElem.clientWidth / this.domElem.clientHeight;\r\n    this.camera.updateProjectionMatrix();\r\n    this.renderer.setSize(this.domElem.clientWidth, this.domElem.clientHeight);\r\n  };\r\n\r\n  private sceneSetup() {\r\n    const light = new THREE.PointLight(new THREE.Color('white'), 15, 100);\r\n    const light2 = new THREE.AmbientLight('white');\r\n    light.position.set(50, 50, 50);\r\n    // this.camera.position.set(1.5, 1.5, 1.5);\r\n    this.camera.lookAt(0, 0, 0);\r\n    this.scene.add(light, light2, this.camera);\r\n    this.setEnviroment();\r\n  }\r\n\r\n  private render() {\r\n    this.cb();\r\n    this.renderer.render(this.scene, this.camera);\r\n    requestAnimationFrame(() => this.render());\r\n  }\r\n\r\n  public animate(cb: Function) {\r\n    this.cb = cb;\r\n    this.render();\r\n  }\r\n\r\n  private setEnviroment = () => {\r\n    // const envLoader = new RGBELoader().setDataType(THREE.UnsignedByteType);\r\n    // envLoader.load('/assets/textures/spiaggia_di_mondello_1k.hdr', hdrenvtex => {\r\n    //   const envMap = this.pmremGenerator.fromEquirectangular(hdrenvtex).texture;\r\n    //   this.pmremGenerator.dispose();\r\n    //   this.scene.environment = envMap;\r\n    // });\r\n  };\r\n}\r\n","import * as THREE from 'three';\r\nimport vertexShader from './vert.glsl';\r\nimport fragmentShader from './frag.glsl';\r\n\r\n// const importGLSL = (glsl: string) => `${glsl}`.replace(/#include < (.+) >/g, '#include <$1>');\r\n\r\nconst tex = new THREE.TextureLoader().load('/assets/low_noise.png');\r\ntex.wrapT = tex.wrapS = THREE.RepeatWrapping;\r\nconst ORANGE = new THREE.Color('#fed9c6');\r\nconst BLUE = new THREE.Color('#cdc0d4');\r\n\r\nconst genHalf = (col: THREE.Color) => {\r\n  const customMaterial = new THREE.ShaderMaterial({\r\n    vertexShader: vertexShader,\r\n    fragmentShader: fragmentShader,\r\n    side: THREE.DoubleSide,\r\n    uniforms: {\r\n      time: { value: 0 },\r\n      tex: { value: tex },\r\n      col: { value: col }\r\n    },\r\n    transparent: true\r\n  });\r\n  const meshs = new THREE.Mesh(new THREE.SphereGeometry(1, 32, 32), customMaterial);\r\n  meshs.rotation.x = Math.PI / 2;\r\n  return meshs;\r\n};\r\n\r\nconst genSphere = () => {\r\n  const mesh = new THREE.Mesh(\r\n    new THREE.SphereGeometry(1, 32, 32),\r\n    // https://threejs.org/docs/#api/en/materials/MeshPhysicalMaterial\r\n    new THREE.MeshPhysicalMaterial({\r\n      color: 'white',\r\n      opacity: 0.1,\r\n      metalness: 0.9,\r\n      roughness: 0.05,\r\n      envMapIntensity: 0.9,\r\n      reflectivity: 0.2,\r\n      refractionRatio: 0.985,\r\n      ior: 0.9,\r\n      side: THREE.DoubleSide,\r\n      transparent: true\r\n    })\r\n  );\r\n  mesh.scale.multiplyScalar(1.01);\r\n  return mesh;\r\n};\r\n\r\nconst half1 = genHalf(ORANGE);\r\nconst sphere1 = genSphere();\r\nconst half2 = genHalf(BLUE);\r\nconst sphere2 = genSphere();\r\nhalf1.position.x += 1.25;\r\nsphere1.position.x += 1.25;\r\nhalf2.position.x -= 1.25;\r\nsphere2.position.x -= 1.25;\r\n\r\ninterface IMesh {\r\n  group: THREE.Object3D;\r\n  update: Function;\r\n}\r\n\r\nconst group = new THREE.Group();\r\ngroup.add(half1, sphere1, half2, sphere2);\r\n\r\nconst blob: IMesh = {\r\n  group,\r\n  update: () => {\r\n    half1.material.uniforms.time.value += 0.05;\r\n    half2.material.uniforms.time.value += 0.05;\r\n  }\r\n};\r\n\r\nexport default blob;\r\n","import * as THREE from 'three';\r\nimport vertexShader from './vert.glsl';\r\nimport fragmentShader from './frag.glsl';\r\n\r\nconst tex = new THREE.TextureLoader().load('/assets/low_noise.png');\r\ntex.wrapT = tex.wrapS = THREE.RepeatWrapping;\r\n\r\nconst envTex = new THREE.TextureLoader().load('/assets/1.png');\r\nenvTex.mapping = THREE.EquirectangularReflectionMapping;\r\n\r\nconst genHalf = (lvl: number) => {\r\n  const customMaterial = new THREE.ShaderMaterial({\r\n    vertexShader: vertexShader,\r\n    fragmentShader: fragmentShader,\r\n    side: THREE.DoubleSide,\r\n    uniforms: {\r\n      time: { value: 0 },\r\n      tex: { value: tex },\r\n      lvl: { value: lvl }\r\n    },\r\n    transparent: true\r\n  });\r\n  const meshs = new THREE.Mesh(new THREE.SphereGeometry(1, 32, 32), customMaterial);\r\n  meshs.rotation.x = Math.PI / 2;\r\n  return meshs;\r\n};\r\n\r\nconst genSphere = () => {\r\n  const mesh = new THREE.Mesh(\r\n    new THREE.SphereGeometry(1, 32, 32),\r\n    // https://threejs.org/docs/#api/en/materials/MeshPhysicalMaterial\r\n    new THREE.MeshPhysicalMaterial({\r\n      color: 'white',\r\n      emissive: 'silver',\r\n      metalness: 1.0,\r\n      roughness: 0.2,\r\n      opacity: 0.25,\r\n      clearcoat: 1,\r\n      clearcoatRoughness: 1,\r\n      // envMap: envTex,\r\n      side: THREE.DoubleSide,\r\n      transparent: true\r\n    })\r\n    // new THREE.MeshLambertMaterial({\r\n    //   envMap: envTex\r\n    // })\r\n  );\r\n  mesh.scale.multiplyScalar(1.01);\r\n  mesh.material.needsUpdate = true;\r\n  return mesh;\r\n};\r\n\r\nconst half1 = genHalf(0.75);\r\nconst sphere1 = genSphere();\r\nhalf1.position.x += 3;\r\nsphere1.position.x += 3;\r\n\r\nconst half2 = genHalf(-0.5);\r\nconst sphere2 = genSphere();\r\nhalf2.position.x -= 3;\r\nsphere2.position.x -= 3;\r\n\r\nconst half3 = genHalf(0);\r\nconst sphere3 = genSphere();\r\n// half3.position.x -= 3;\r\n// sphere3.position.x -= 3;\r\n\r\ninterface IMesh {\r\n  group: THREE.Object3D;\r\n  update: Function;\r\n}\r\n\r\nconst group = new THREE.Group();\r\ngroup.add(half1, sphere1, half2, sphere2, half3, sphere3);\r\n\r\nconst blob: IMesh = {\r\n  group,\r\n  update: () => {\r\n    half1.material.uniforms.time.value += 0.05;\r\n    half2.material.uniforms.time.value += 0.05;\r\n    half3.material.uniforms.time.value += 0.05;\r\n  }\r\n};\r\n\r\nexport default blob;\r\n","import * as THREE from 'three';\r\nimport vertexShader from './vert.glsl';\r\nimport fragmentShader from './frag.glsl';\r\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\r\n\r\nconst importGLSL = (glsl: string) => `${glsl}`.replace(/#include < (.+) >/g, '#include <$1>');\r\nconst group = new THREE.Group();\r\n\r\nconst tex = new THREE.TextureLoader().load('/assets/low_noise.png');\r\ntex.wrapT = tex.wrapS = THREE.RepeatWrapping;\r\n\r\nexport const genSphere = () => {\r\n  const customMaterial = new THREE.ShaderMaterial({\r\n    vertexShader: importGLSL(vertexShader),\r\n    fragmentShader: /* glsl */ fragmentShader,\r\n    side: THREE.DoubleSide,\r\n    uniforms: {\r\n      time: { value: 0 },\r\n      tex: { value: tex }\r\n    },\r\n    transparent: true\r\n  });\r\n  customMaterial.needsUpdate = true;\r\n\r\n  const geometry = new THREE.SphereGeometry(1, 132, 132);\r\n  const mesh = new THREE.Mesh(geometry, customMaterial);\r\n  return mesh;\r\n};\r\n\r\n// const envLoader = new RGBELoader().setDataType(THREE.UnsignedByteType);\r\n// const tt: THREE.Texture = new THREE.TextureLoader().load('/assets/textures/spiaggia_di_mondello_1k.hdr');\r\n// console.log(tt);\r\n// envLoader.load('/assets/textures/spiaggia_di_mondello_1k.hdr', t => {\r\n// const mesh3 = new THREE.Mesh(\r\n//   geometry,\r\n//   new THREE.MeshPhongMaterial({\r\n//     color: 'blue',\r\n//     // refractionRatio: 0.4\r\n//     // roughness: 0.5,\r\n//     // metalness: 1\r\n//     // reflectivity: 1,\r\n//     // refractionRatio: 1,\r\n//     // emissiveIntensity: 1,\r\n//     envMap: tt\r\n//   })\r\n// );\r\n\r\nconst sphere = genSphere();\r\ngroup.add(sphere);\r\n\r\ninterface IMesh {\r\n  group: THREE.Object3D;\r\n  update: Function;\r\n}\r\n\r\nconst blob: IMesh = {\r\n  group,\r\n  update: () => {\r\n    sphere.material.uniforms.time.value += 0.05;\r\n  }\r\n};\r\n\r\nexport default blob;\r\n","import * as THREE from 'three';\r\nimport vertexShader from './vert.glsl';\r\nimport fragmentShader from './frag.glsl';\r\nimport { genSphere } from '../sphere';\r\n\r\nconst group = new THREE.Group();\r\n\r\nconst tex = new THREE.TextureLoader().load('/assets/low_noise.png');\r\ntex.wrapT = tex.wrapS = THREE.RepeatWrapping;\r\n\r\nconst arr = [\r\n  [0, -1, 0],\r\n  [0, 0, 0],\r\n  [0, 0, 4],\r\n  [4, 0, 4],\r\n  [4, 0, -2],\r\n  [0, 0, -2],\r\n  [0, 2, -2],\r\n  [0, 2, 4],\r\n  [4, 2, 4],\r\n  [4, 2, -2],\r\n  [2, 2, -2],\r\n  [2, 2, 1],\r\n  [2, -2, 1],\r\n  [2, -2, 8],\r\n  [2, 4, 8],\r\n  [0, 4, 8],\r\n  [0, 5, 8]\r\n].map(c => new THREE.Vector3(...c));\r\nvar curve = new THREE.CatmullRomCurve3(arr);\r\n\r\nconst pipeGeometry = new THREE.TubeGeometry(curve, 220, 0.5, 8);\r\nconst pipe = new THREE.Mesh(\r\n  pipeGeometry,\r\n  new THREE.MeshPhysicalMaterial({\r\n    color: 'white',\r\n    roughness: 0.5,\r\n    metalness: 1,\r\n    clearcoat: 1,\r\n    clearcoatRoughness: 1,\r\n    side: THREE.DoubleSide,\r\n    transparent: true,\r\n    opacity: 0.15\r\n    // polygonOffset: true,\r\n    // polygonOffsetFactor: -44,\r\n    // polygonOffsetUnits: -22\r\n    // wireframe: true\r\n  })\r\n);\r\n\r\nconst geometry2 = new THREE.TubeGeometry(curve, 220, 0.5, 8);\r\nconst gemvertlen = geometry2.attributes.position.array.length;\r\nconst indexes = [...Array(gemvertlen / 3)].map((_, i) => i);\r\nconst indexattr = new Float32Array(indexes);\r\ngeometry2.setAttribute('indexattr', new THREE.BufferAttribute(indexattr, 1));\r\n\r\nconst WATER_LENGTH = 200;\r\n\r\nconst pipe2 = new THREE.Mesh(\r\n  geometry2,\r\n  new THREE.ShaderMaterial({\r\n    vertexShader: vertexShader,\r\n    fragmentShader: fragmentShader,\r\n    side: THREE.DoubleSide,\r\n    uniforms: {\r\n      time: { value: 0 },\r\n      tex: { value: tex },\r\n      from: { value: 0 },\r\n      len: { value: WATER_LENGTH }\r\n    }\r\n  })\r\n);\r\n\r\nconst sphere = genSphere();\r\nsphere.position.set(0, 6, 8 - 0.5);\r\nconst sphere2 = genSphere();\r\nsphere2.position.set(0, -3, -0.5);\r\n\r\ngroup.add(pipe2, pipe, sphere, sphere2);\r\n\r\ninterface IMesh {\r\n  group: THREE.Object3D;\r\n  update: Function;\r\n}\r\n\r\nconst blob: IMesh = {\r\n  group,\r\n  update: () => {\r\n    if (pipe2.material.uniforms.from.value > gemvertlen / 3 + WATER_LENGTH) {\r\n      pipe2.material.uniforms.from.value = 0;\r\n    }\r\n    pipe2.material.uniforms.from.value += 8;\r\n    pipe2.material.uniforms.time.value += 0.05;\r\n    sphere.material.uniforms.time.value += 0.05;\r\n    sphere2.material.uniforms.time.value += 0.05;\r\n  }\r\n};\r\n\r\nexport default blob;\r\n","import './style.sass';\r\nimport * as THREE from 'three';\r\nimport { WebglEngine } from './webgl';\r\nimport halfempty from './halfempty';\r\nimport halfempty2 from './halfempty2';\r\n// import halfempty from './flat';\r\n// import sphere from './sphere';\r\nimport pipe from './pipe';\r\n// import halfempty from './sphere-noise2dfunc';\r\n\r\nconst engine = new WebglEngine(document.querySelector('#sphere') as HTMLElement);\r\nengine.camera.position.set(-5, 7, -4);\r\nengine.camera.lookAt(0, 3, 0);\r\nengine.scene.add(pipe.group);\r\nengine.animate(() => {\r\n  pipe.update();\r\n});\r\n\r\n// const engine = new WebglEngine(document.querySelector('#sphere') as HTMLElement);\r\n// engine.camera.position.set(0, 1, -2);\r\n// engine.camera.lookAt(0, 0, 0);\r\n// engine.scene.add(sphere.group);\r\n// engine.animate(() => {\r\n//   sphere.update();\r\n// });\r\n\r\nconst engine2 = new WebglEngine(document.querySelector('#half') as HTMLElement);\r\nengine2.camera.position.set(0, 1, -4);\r\nengine2.camera.lookAt(halfempty.group.position);\r\n\r\nengine2.scene.add(halfempty.group);\r\nengine2.animate(() => {\r\n  halfempty.update();\r\n});\r\n\r\nconst engine3 = new WebglEngine(document.querySelector('#next') as HTMLElement);\r\nengine3.camera.position.set(0, 1, -4);\r\nengine3.camera.lookAt(halfempty2.group.position);\r\n\r\nengine3.scene.add(halfempty2.group);\r\nengine3.animate(() => {\r\n  halfempty2.update();\r\n});\r\n"],"names":["___CSS_LOADER_EXPORT___","push","module","id","exports","options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","update","hot","invalidate","isNamedExport","oldLocals","accept","a","b","p","isEqualLocals","dispose","WebglEngine","constructor","domElem","cb","onWindowResize","this","camera","aspect","clientWidth","clientHeight","updateProjectionMatrix","renderer","setSize","setEnviroment","antialias","appendChild","domElement","scene","background","pmremGenerator","compileEquirectangularShader","controls","OrbitControls","sceneSetup","window","addEventListener","light","light2","position","set","lookAt","add","render","requestAnimationFrame","animate","tex","load","wrapT","wrapS","ORANGE","BLUE","genHalf","col","customMaterial","vertexShader","fragmentShader","side","uniforms","time","value","transparent","meshs","rotation","x","Math","PI","genSphere","mesh","color","opacity","metalness","roughness","envMapIntensity","reflectivity","refractionRatio","ior","scale","multiplyScalar","half1","sphere1","half2","sphere2","group","material","mapping","lvl","emissive","clearcoat","clearcoatRoughness","needsUpdate","half3","sphere3","glsl","replace","geometry","sphere","arr","map","c","curve","pipeGeometry","pipe","geometry2","gemvertlen","attributes","array","length","indexes","Array","_","i","indexattr","Float32Array","setAttribute","pipe2","from","len","engine","document","querySelector","engine2","halfempty","engine3","halfempty2"],"sourceRoot":""}